/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projectoop;

import DbConnection.ConectionDB;
import DbConnection.ProductUtils;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import javax.swing.table.TableModel;
import java.util.Calendar;
import java.util.Date;
import static javax.print.attribute.Size2DSyntax.MM;
import java.sql.PreparedStatement;

import com.itextpdf.text.Document;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import doc.OpenPdf;
import java.io.FileOutputStream;

/**
 *
 * @author ksama
 */
public class SELLItem extends javax.swing.JFrame {
    
    public String numberPattern = "^[0-9]{10}$";
    private int finalTotalPrice= 0;
    private String billId = "";
    private String username = "";
    
    
    
    /**
     * Creates new form SELLItem
     */
    public SELLItem() {
        initComponents();
    }
    
    public SELLItem(String tempUsername) {
        initComponents();
        username = tempUsername;
        setLocationRelativeTo(null);
    }
    
    
    private void productName(String pNameOrPId){
        DefaultTableModel model = (DefaultTableModel)productTable.getModel();
        model.setRowCount(0);

        try{
          Connection con = ConectionDB.getCon();
          Statement st = con.createStatement();
          ResultSet rs = st.executeQuery("SELECT * FROM additems WHERE ProductName LIKE '"+pNameOrPId+ "%' OR productID LIKE '"+pNameOrPId+ "%'");
          while(rs.next()){
              model.addRow(new Object[]{rs.getString("productID") + "- " + rs.getString("ProductName")});   // database column
          }

        }catch(Exception yoo){
            JOptionPane.showMessageDialog(null, yoo);
        }
    }
    
    
    private void clearProductsFields(){
        txtProductId.setText("");
        txtProductName.setText("");
        txtBrandName.setText("");
        txtPricePerUnit.setText("");
        txtNoOfQty.setText("");
        txtTotalPrice.setText("");
    }
    
    public String getProductId(String prefix){
        return prefix + System.nanoTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        txtProductId = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtProductName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtBrandName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtPricePerUnit = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtTotalPrice = new javax.swing.JTextField();
        btnAddToCard = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtNoOfQty = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        lblFinalTotalPrice = new javax.swing.JLabel();
        btnPurchase = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("SELL Items");

        backBtn.setBackground(new java.awt.Color(159, 174, 0));
        backBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backBtn.setText("<<Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 34)); // NOI18N
        jLabel2.setText("Stationary Management System");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Search");

        txtSearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        productTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Products"
            }
        ));
        productTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(productTable);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Product ID");

        txtProductId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Product Name");

        txtProductName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Brand Name");

        txtBrandName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Price (Per Unit)");

        txtPricePerUnit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("TOTAL Price (Rs.)");

        txtTotalPrice.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtTotalPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalPriceActionPerformed(evt);
            }
        });

        btnAddToCard.setBackground(new java.awt.Color(159, 174, 0));
        btnAddToCard.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAddToCard.setText("Add to Card");
        btnAddToCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCardActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("No.Of.Units");

        txtNoOfQty.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtNoOfQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNoOfQtyKeyReleased(evt);
            }
        });

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Brand Name", "Price per Unit", "No of Units", "Total Price"
            }
        ));
        cartTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cartTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(cartTable);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("Rs :");

        lblFinalTotalPrice.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblFinalTotalPrice.setText("00");

        btnPurchase.setBackground(new java.awt.Color(159, 174, 0));
        btnPurchase.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPurchase.setText("Purchase & Print");
        btnPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(252, 252, 252)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(588, 588, 588))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtProductId)
                                    .addComponent(txtProductName)
                                    .addComponent(jLabel5)
                                    .addComponent(txtBrandName, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(176, 176, 176))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(149, 149, 149)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnAddToCard)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtPricePerUnit)
                                                    .addComponent(jLabel7)
                                                    .addComponent(txtNoOfQty, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(11, 11, 11))))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(440, 440, 440)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblFinalTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPurchase)))
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(backBtn))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(txtProductId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(txtPricePerUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNoOfQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBrandName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnAddToCard)
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(lblFinalTotalPrice)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(btnPurchase)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:

        SellerDashboard sD = new SellerDashboard();
        sD.show();
        dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void txtTotalPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalPriceActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        
        productName("");
        txtProductId.setEditable(false);
        txtProductName.setEditable(false);
        txtBrandName.setEditable(false);
        txtPricePerUnit.setEditable(false);
//        txtNoOfQty.setEditable(false);
        
        txtTotalPrice.setEditable(false);
    }//GEN-LAST:event_formComponentShown

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        
        String search = txtSearch.getText();
        productName(search);
        
    }//GEN-LAST:event_txtSearchKeyReleased

    private void productTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseClicked
        // when clicked table row fill the all text fields:
        
        int index = productTable.getSelectedRow();
        TableModel model = productTable.getModel();
        String pNameOrPId = model.getValueAt(index, 0).toString();  //Extracts the value at the selected row's first column
        
        
        String uniqueId[] = pNameOrPId.split("-",0);  // ID-Name
        
        try{
            Connection con = ConectionDB.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM additems WHERE productID="+uniqueId[0]+"");
            
            while(rs.next()){
                txtProductId.setText(uniqueId[0]);
                txtProductName.setText(rs.getString("ProductName"));
                txtBrandName.setText(rs.getString("brandName"));
                txtPricePerUnit.setText(rs.getString("unitPrice"));
                txtNoOfQty.setText("");
                txtTotalPrice.setText("");
            }
            
        }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_productTableMouseClicked

    private void txtNoOfQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNoOfQtyKeyReleased
        // TODO add your handling code here:
        
        String noOfUnits = txtNoOfQty.getText();
    
        // Validate input to ensure it contains only numeric characters
        if(!noOfUnits.matches("\\d*")) {
            JOptionPane.showMessageDialog(null, "Number of units field is invalid.");
            return;
        }
    
        // Parse the input only if it's a valid integer
        if(!noOfUnits.isEmpty()){               //checks if the noOfUnits string is not empty
            String price = txtPricePerUnit.getText();
            int totalPrice = Integer.parseInt(noOfUnits) * Integer.parseInt(price);
            txtTotalPrice.setText(String.valueOf(totalPrice));
        } else {
            txtTotalPrice.setText("");
        }
        


    }//GEN-LAST:event_txtNoOfQtyKeyReleased

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnAddToCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCardActionPerformed
        // AddtoCard btn calculate total quntity and price Show table :
        
        
        //assign text fields values 
        String noOfUnits = txtNoOfQty.getText();
        String productId = txtProductId.getText(); // get value form text fiels Product Id
        
        //assign data values of product items in to the fields from Fields 
        if (!noOfUnits.equals("") && !productId.equals("")){
            String name = txtProductName.getText();
            String brandname = txtBrandName.getText();
            String pricePerUnit = txtPricePerUnit.getText();
            String totalPrice = txtTotalPrice.getText();
            int checkStock =0;
            int checkProductAlreadyExistInCart = 0;
            
            
            try{
                Connection con = ConectionDB.getCon();
                Statement st = con.createStatement();
                
                ResultSet rs = st.executeQuery("SELECT * FROM additems WHERE productID="+productId+"");
                
                //This loop iterates over each row in the result set
                while(rs.next()){
                    //checks if the quantity of the product available in the database
                    if(rs.getInt("quantity") >= Integer.parseInt(noOfUnits)){ 
                        checkStock = 1;
                    }else{
                        JOptionPane.showMessageDialog(null, "This product is out of stock. Only "+rs.getInt("quantity")+" Left");
                    }
                }
             
                
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
            
            
            
            if(checkStock == 1){  //checks whether checkStock is equal to 1.
                DefaultTableModel dtm =(DefaultTableModel) cartTable.getModel();     
                
                //if cart is not empty, it proceeds to iterate over each row to check if the product already exists in the cart.
                if(cartTable.getRowCount() != 0){
                    
                    //This loop iterates over each row of the cart table.
                    for(int i = 0; i < cartTable.getRowCount(); i++){
                        if(Integer.parseInt(dtm.getValueAt(i, 0).toString()) == Integer.parseInt(productId)){  //This condition checks if the product ID of the current row in the cart matches the productId that is being checked
                            checkProductAlreadyExistInCart = 1;         //displays a message indicating that the product already exists in the cart.
                            JOptionPane.showMessageDialog(null, "Product already exist in cart");
                        }
                    }
                }
                
                if(checkProductAlreadyExistInCart == 0){     //If the product is not already in the cart
                    dtm.addRow(new Object[]{productId, name, brandname, pricePerUnit, noOfUnits, totalPrice} );    //adds a new row to the cart table with the product details
                    finalTotalPrice = finalTotalPrice + Integer.parseInt(totalPrice);      //updates the total price
                    lblFinalTotalPrice.setText(String.valueOf(finalTotalPrice));     //display the total price in Rs Label
                    JOptionPane.showMessageDialog(null, "Added Successfully.");
                }
                clearProductsFields();
            }
        }else{
                JOptionPane.showMessageDialog(null, "No of Units and and Product ID field is required.");
        }  
    }//GEN-LAST:event_btnAddToCardActionPerformed

    private void cartTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartTableMouseClicked
        // delete row in table clicking the item row:
        
        int index  = cartTable.getSelectedRow();
        int a = JOptionPane.showConfirmDialog(null, "Do you want to remove this Item", "select",JOptionPane.YES_NO_OPTION);
        if(a == 0){
            TableModel model = cartTable.getModel();
            String total = model.getValueAt(index, 5).toString();
            finalTotalPrice = finalTotalPrice - Integer.parseInt(total);
            lblFinalTotalPrice.setText(String.valueOf(finalTotalPrice));
            ((DefaultTableModel) cartTable.getModel()).removeRow(index);
        }
        
        
    }//GEN-LAST:event_cartTableMouseClicked

    private void btnPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPurchaseActionPerformed
        // TODO add your handling code here:
        
        if (finalTotalPrice != 0){
            billId = getProductId("Bill-"); // getProductID method in above
            
            DefaultTableModel dtm = (DefaultTableModel) cartTable.getModel();
            if(cartTable.getRowCount() != 0){
                for(int i = 0; i < cartTable.getRowCount();i++){
                    try{
                        
                        Connection con = ConectionDB.getCon();
                        Statement st = con.createStatement();

                        
                      st.executeUpdate("UPDATE additems SET Quantity=Quantity- " + Integer.parseInt(dtm.getValueAt(i, 4).toString()) + " WHERE productID="+Integer.parseInt(dtm.getValueAt(i, 0).toString()));

                        
                    }catch(Exception amma){
                        JOptionPane.showMessageDialog(null, amma);
                    }
                }
            }
            
            
            try{
                SimpleDateFormat myFormat =new SimpleDateFormat("dd-MM-YYYY");
                Calendar cal = Calendar.getInstance();
                
                Connection con = ConectionDB.getCon();
                PreparedStatement ps = con.prepareStatement("INSERT INTO bill (billId, billDate, totalPaid, generatedBy) VALUES (?, ?, ?, ?)");
                
                ps.setString(1, billId);
                ps.setString(2, myFormat.format(cal.getTime()));
                ps.setInt(3, finalTotalPrice);
                ps.setString(4, username);
                
                
                
                ps.executeUpdate();
                
                
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
            
            //Create Bill Document
            com.itextpdf.text.Document doc = new com.itextpdf.text.Document();
            try{
               PdfWriter.getInstance(doc, new FileOutputStream(ProductUtils.billPath+""+billId+".pdf"));
               doc.open();
               Paragraph StationaryName = new Paragraph("                                                         Stationery Management System\n");
               Paragraph starLine = new Paragraph("****************************************************************************************************************");
               doc.add(StationaryName);
               doc.add(starLine);
               
               Paragraph details = new Paragraph("\tBill ID: "+billId+"\nDate: "+ new Date() + "\nTotal Paid (Rs.): "+finalTotalPrice);
               doc.add(details);
               doc.add(starLine);
               
               PdfPTable tb1 = new PdfPTable(6);
               
               tb1.addCell("Product ID");
               tb1.addCell("Name");
               tb1.addCell("Brand Name");
               tb1.addCell("Price per Unit (Rs.)");
               tb1.addCell("No Of Units");
               tb1.addCell("Sub Total Price (Rs.)");
               
               for(int i = 0; i < cartTable.getRowCount(); i++){
                   String a = cartTable.getValueAt(i, 0).toString();
                   String b = cartTable.getValueAt(i, 1).toString();
                   String c = cartTable.getValueAt(i, 2).toString();
                   String d = cartTable.getValueAt(i, 3).toString();
                   String e = cartTable.getValueAt(i, 4).toString();
                   String f = cartTable.getValueAt(i, 5).toString();
                   
                   tb1.addCell(a);
                   tb1.addCell(b);
                   tb1.addCell(c);
                   tb1.addCell(d);
                   tb1.addCell(e);
                   tb1.addCell(f);
              
               }
               doc.add(tb1);
               doc.add(starLine);
               Paragraph thanksMsg = new Paragraph("Thank you, Please Visit Again.");
               doc.add(thanksMsg);
               
               //now open Pdf calling OpenPdf class
               //OpenPdf.openById(String.valueOf(billId));
               OpenPdf.openById(String.valueOf(billId));

               
               
               
            }catch(Exception hey ){
                JOptionPane.showMessageDialog(null, hey);
            }
            
            JOptionPane.showMessageDialog(null, "Purchase & BilL Printed Succesfully");
            doc.close();
            setVisible(false);
            new SELLItem(username).setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "Please add some products to the cart.");
        }
    }//GEN-LAST:event_btnPurchaseActionPerformed
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SELLItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SELLItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SELLItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SELLItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SELLItem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton btnAddToCard;
    private javax.swing.JButton btnPurchase;
    private javax.swing.JTable cartTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblFinalTotalPrice;
    private javax.swing.JTable productTable;
    private javax.swing.JTextField txtBrandName;
    private javax.swing.JTextField txtNoOfQty;
    private javax.swing.JTextField txtPricePerUnit;
    private javax.swing.JTextField txtProductId;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTotalPrice;
    // End of variables declaration//GEN-END:variables
}
